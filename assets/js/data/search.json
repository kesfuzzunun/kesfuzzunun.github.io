[ { "title": "Aykırı Değerlerle Başa Çıkmak", "url": "/posts/aykiridegerlerilebasacikmak/", "categories": "ML", "tags": "", "date": "2022-05-09 00:00:00 +0000", "snippet": "Bu yazımızda veri ön işlemenin önemli adımlarından biri olan aykırı değer sorununu python uygulaması ile nasıl çözebileceğimizi ele alacağız.“Verileriniz kötüyse, makine öğrenimi araçlarınız işe yaramaz.” (harvard business review)Genel olarak, makine öğrenmesi öğrenenler için 🙂, veri ön işlemenin sonunda verilerinizi modele fit etmek en heyecan verici kısımdır. Ne yazık ki makine öğrenmesi çalışmalarının büyük bir kısmı verilerin model için hazırlanmasından oluşur. Aykırı değerlerle uğraşmak, özellik mühendisliğinin ve veri ön işlemenin önemli bir parçasıdır. Bunun için aykırı değerlerle nasıl başa çıkabileceğimize bir göz atalım.Aykırı Değerler ve Yaklaşım TürleriAykırı değerler, veri kümesinin genel yapısını bozan ve doğrusal modellerde sorunlara neden olan verilerdir. Aykırı değerlerle başa çıkmak için farklı yöntemler denenebilir.Sektör BilgisiBunlardan biri, sektör bilginize dayanarak, uğraştığınız sektöre ait bir veri setinde sahip olduğunuz verilerin eşik değerlerini belirlemektir. (Kiralık evler verisi ile uğraştığınızda bir evin metrekaresi için aykırı bir değer belirlemek gibi düşünebiliriz.)Standart sapmaVeya verilerinizi gözden geçirdikten sonra standart sapmanızı kontrol eder ve ortalamadan belirli (örn. 2.5 standart sapma) standart sapma uzakta olan değerleri aykırı değerler olarak tanımlarsınız.Z-SkoruZ-puanı yönteminde ortalama 0 kabul edilir, ortalamadan bir standart sapma 1 z puanıdır. Bir eşik z-skor değeri belirlenir ve bu değer baz alınarak aykırı değerler hesaplanır.BoxplotBoxplot en çok tercih edilen yöntemdir. Hesapladığımız çeyrekler açıklığı (iqr) ile alt ve üst limitlerimizi belirliyoruz.üst limit= q3+1.5x iqralt limit = q1–1.5 x iqrIQR = q3 — q1Kutu Grafiği Yönteminin UygulanmasıGerekli import işlemlerini yaptıktan sonra veri ön işlemeye başlayabiliriz.import numpy as npimport pandas as pdimport seaborn as snsfrom matplotlib import pyplot as pltİlk olarak, çeyrekler açıklığı üzerinden üst ve alt limitleri belirleyelim.q1 = df[&quot;Age&quot;].quantile(0.25)q3 = df[&quot;Age&quot;].quantile(0.75)iqr = q3 - q1up = q3 + 1.5 * iqrlow = q1 - 1.5 * iqrdf[(df[&quot;Age&quot;] &amp;lt; low) | (df[&quot;Age&quot;] &amp;gt; up)]Aykırı değer var mı?df[(df[&quot;Age&quot;] &amp;lt; low) | (df[&quot;Age&quot;] &amp;gt; up)].any(axis=None),# &quot;axis=None&quot; olmasının nedeni, tüm verileri satır veya sütunlardan bağımsız olarak gözlemlemek istememizdir.# Daha sonra bu süreci işlevselleştirebilir ve ileride kullanmak üzere kaydedebiliriz.Daha sonra bu süreci fonksiyonlaştırabilir ve ileride kullanmak üzere kaydedebiliriz.def outlier_thresholds(dataframe, col_name, q1=0.25, q3=0.75): quartile1 = dataframe[col_name].quantile(q1) quartile3 = dataframe[col_name].quantile(q3) interquantile_range = quartile3 - quartile1 up_limit = quartile3 + 1.5 * interquantile_range low_limit = quartile1 - 1.5 * interquantile_range return low_limit, up_limitoutlier_thresholds(df, &quot;Age&quot;)Şimdiye kadar eşik değerleri belirledik, aykırı değerlere ulaştık ve aykırı değer olup olmadığını kontrol ettik.Burada başka bir fonksiyon oluşturarak aykırı değer olup olmadığını hızlıca kontrol edebiliriz.def check_outlier(dataframe, col_name): low_limit, up_limit = outlier_thresholds(dataframe, col_name) if dataframe[(dataframe[col_name] &amp;gt; up_limit) | (dataframe[col_name] &amp;lt; low_limit)].any(axis=None): return True else: return Falsecheck_outlier(df, &quot;Age&quot;)Aykırı değerlere veya indeks bilgilerine ulaşmak istediğimizde aşağıdaki seçim işlemlerini kullanabiliriz.df[(df[&quot;Age&quot;] &amp;lt; low) | (df[&quot;Age&quot;] &amp;gt; up)].head()df[(df[&quot;Age&quot;] &amp;lt; low) | (df[&quot;Age&quot;] &amp;gt; up)].indexPeki seçtiğimiz veri sayısal değilse bunu fonksiyona nasıl belirtebiliriz? Veya veri setindeki kategorik ve sayısal değişkenleri, hatta kategorik ve kategorik görünümlü sayısal değerleri sayısal bir görünümle belirten bir fonksiyonumuz olsaydı? Bunun için aşağıdaki adımları takip edebiliriz.def grab_col_names(dataframe, cat_th=10, car_th=20):#Not: Sayısal görünüme sahip kategorik değişkenler de kategorik değişkenlere dahildir. # cat_cols, cat_but_car cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == &quot;O&quot;] num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() &amp;lt; cat_th and dataframe[col].dtypes != &quot;O&quot;] cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() &amp;gt; car_th and dataframe[col].dtypes == &quot;O&quot;] cat_cols = cat_cols + num_but_cat cat_cols = [col for col in cat_cols if col not in cat_but_car] # num_cols num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != &quot;O&quot;] num_cols = [col for col in num_cols if col not in num_but_cat] return cat_cols, num_cols, cat_but_carGördüğünüz gibi bunu bize her zaman işimize yarayabilecek kategorik, sayısal ve kategorik görünümlü ana sütunları gösteren bir fonksiyon olarak kullanabiliriz.Aşağıdaki kod ile veri setimizdeki sütun isimlerini kaydedip görüntüleyebiliriz.cat_cols, num_cols, cat_but_car = grab_col_names(df)Daha önce belirtildiği gibi, boxplot yöntemi yalnızca sayısal verilerde aykırı değerleri bulmamıza izin verdi. Artık “grab_col_names” fonksiyonu yardımıyla bulduğumuz sayısal verilerimizin aykırı değerlerini bulabiliriz.outlier_thresholds(df, num_cols)Aykırı Değerler Sorununu ÇözmeAykırı değerler sorununun mevcut duruma göre farklı çözümleri vardır. Bu durumda aykırı değerlerden kurtulmak için onları silebilir, yok sayabilir veya eşikler değerler ile yeniden atayabiliriz.Silmeoutlier_thresholds(df, &quot;Age&quot;)check_outlier(df, &quot;Age&quot;)df[&quot;Age&quot;] = df[~((df[&quot;Age&quot;] &amp;lt; low) | (df[&quot;Age&quot;] &amp;gt; up))]#Yukarıdaki seçim işleminde kullandığımız “~” işareti sayesinde aykırı olmayan değerleri seçiyoruz.Eşiklerle Değerler ile Yeniden AtamaBazı senaryolarda, aykırı değerlere sahip diğer satır verileri önemli olduğunda, bunları silmek yerine baskılamamız gerekebilir. Bu gibi durumlarda, aykırı değerleri eşiklerle değiştiririz.outlier_thresholds(df, &quot;Age&quot;)check_outlier(df, &quot;Age&quot;)df.loc[(df[&quot;Age&quot;] &amp;gt; up), &quot;Age&quot;] = up_limit #upper tresholddf.loc[(df[&quot;Age&quot;] &amp;lt; low), &quot;Age&quot;] = low_limit #lower tresholdYoksaymakAncak ağaç yapılarını ele aldığımızda, modelimiz için bir sorun teşkil etmedikleri için aykırı değerleri görmezden geliyoruz. Özellikle ağaç modelleri model eğitme süresinde uzama oluşturabilmesi dışında aykırı değerlere karşı duyarsızdır.Bu yazıda, veri ön işlemenin önemli bir parçası olan aykırı değerlerle başa çıkma konusunu uygulamalı bir şekilde incelemeye çalıştım. Umarım faydalı olmuştur.Sormak istediğiniz sorular veya eklemek istediğiniz eleştirileriniz varsa yazmaktan çekinmeyin… 🤙🏻Kaynaklar“Box Plot Diagram to Identify Outliers.” n.d. Accessed April 14, 2022. https://www.whatissixsigma.net/box-plot-diagram-to-identify-outliers/.“I Have An Outlier!” n.d. Accessed April 15, 2022. https://www.ctspedia.org/do/view/CTSpedia/OutLier.“Identifying Outliers.” n.d. Accessed April 15, 2022. https://help.highbond.com/helpdocs/analytics/15/en-us/Content/analytics/analyzing_data/identifying_outliers.htm.“If Your Data Is Bad Your Machine Learning Tools Are Useless.” Accessed April 14, 2022. https://hbr.org/2018/04/if-your-data-is-bad-your-machine-learning-tools-are-uselessResim 1.: https://lord-of-the-art.livejournal.com/461918.htmlResim 2.: https://storage.googleapis.com/publiclab-production/public/system/images/photos/000/032/980/original/Screen_Shot_2019-06-18_at_10.27.45_AM.png" } ]
